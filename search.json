[{"path":"https://tidyfun.github.io/tidyfun/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2019 Fabian Scheipl, Jeff Goldsmith, Julia Wrobel Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"tf-class","dir":"Articles","previous_headings":"tf-Class: Definition","what":"tf-class","title":"tf Vectors and Operations","text":"tf new data type (vectors ) functional data: abstract superclass functional data 2 forms: (argument, value)-tuples: subclass tfd, also irregular sparse basis representation: subclass tfb represents observed function weighted sum fixed dictionary known “basis functions”. basically, list numeric vectors (… since lists work well columns data frames …) additional attributes define function-like behavior: evaluate given “functions” new arguments domain resolution argument values S3 based","code":""},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"example-data","dir":"Articles","previous_headings":"tf-Class: Definition","what":"Example Data","title":"tf Vectors and Operations","text":"First extract tf vector tidyfun::dti_df dataset containing fractional anisotropy tract profiles corpus callosum (cca). printed, tf vectors show first arg value pairs subject. also extract simple 5-element vector functions regular grid: illustration, plot vector cca_five .","code":"data(\"dti_df\")  cca <- dti_df$cca cca ## tfd[382] on (0,1) based on 73 to 93 (mean: 93) evaluations each ## inter-/extrapolation by tf_approx_linear  ## 1001_1: (0.000,0.49);(0.011,0.52);(0.022,0.54); ... ## 1002_1: (0.000,0.47);(0.011,0.49);(0.022,0.50); ... ## 1003_1: (0.000,0.50);(0.011,0.51);(0.022,0.54); ... ## 1004_1: (0.000,0.40);(0.011,0.42);(0.022,0.44); ... ## 1005_1: (0.000,0.40);(0.011,0.41);(0.022,0.40); ... ##     [....]   (377 not shown) cca_five <- cca[1:5, seq(0, 1, length.out = 93), interpolate = TRUE] rownames(cca_five) <- LETTERS[1:5] cca_five <- tfd(cca_five, signif = 2) cca_five ## tfd[5] on (0,1) based on 93 evaluations each ## interpolation by tf_approx_linear  ## A: (0.000,0.49);(0.011,0.52);(0.022,0.54); ... ## B: (0.000,0.47);(0.011,0.49);(0.022,0.50); ... ## C: (0.000,0.50);(0.011,0.51);(0.022,0.54); ... ## D: (0.000,0.40);(0.011,0.42);(0.022,0.44); ... ## E: (0.000,0.40);(0.011,0.41);(0.022,0.40); ... plot(cca_five, xlim = c(-0.15, 1), col = pal_5) text(x = -0.1, y = cca_five[, 0.07], labels = names(cca_five), col = pal_5)"},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"tf-subclass-tfd","dir":"Articles","previous_headings":"tf-Class: Definition","what":"tf subclass: tfd","title":"tf Vectors and Operations","text":"tfd objects contain “raw” functional data: represented list evaluations \\(f_i(t)|_{t=t'}\\) corresponding argument vector(s) \\(t'\\) domain: range valid args. tfd-vector contains evaluator function defines inter-/extrapolate evaluations args tfd two subclasses: one regular data common grid one irregular sparse data. cca data irregular (values missing subjects arguments) example clearly illustrates support sparse irregular data using CD4 cell counts longitudinal study.","code":"cca_five |>   tf_evaluations() |>   str() ## List of 5 ##  $ A: num [1:93] 0.491 0.517 0.536 0.555 0.593 ... ##  $ B: num [1:93] 0.472 0.487 0.502 0.523 0.552 ... ##  $ C: num [1:93] 0.502 0.514 0.539 0.574 0.603 ... ##  $ D: num [1:93] 0.402 0.423 0.44 0.46 0.475 ... ##  $ E: num [1:93] 0.402 0.406 0.399 0.386 0.409 ... cca_five |>   tf_arg() |>   str() ##  num [1:93] 0 0.0109 0.0217 0.0326 0.0435 ... cca_five |> tf_domain() ## [1] 0 1 tf_evaluator(cca_five) |> str() ## function (x, arg, evaluations) tf_evaluator(cca_five) <- tf_approx_spline cd4_vec <- tfd(refund::cd4)  cd4_vec[1:2] ## tfd[2] on (-18,42) based on 3 to 4 (mean: 4) evaluations each ## inter-/extrapolation by tf_approx_linear  ## [1]: (-9,548);(-3,893);( 3,657) ## [2]: (-3,752);( 3,459);( 9,181); ... cd4_vec[1:2] |>   tf_arg() |>   str() ## List of 2 ##  $ : num [1:3] -9 -3 3 ##  $ : num [1:4] -3 3 9 15 cd4_vec[1:20] |> plot(pch = \"x\", col = viridis(20))"},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"tf-subclass-tfb","dir":"Articles","previous_headings":"tf-Class: Definition","what":"tf subclass: tfb","title":"tf Vectors and Operations","text":"Functional data basis representation: represented list coefficients common basis_matrix basis function evaluations vector arg-values. contains basis function defines evaluate basis functions new args differentiate integrate . tfb_spline: uses mgcv-spline bases tfb_fpc: uses functional principal components significant memory time savings:","code":"refund::DTI$cca |>   object.size() |>   print(units = \"Kb\") ## 307.7 Kb cca |>   object.size() |>   print(units = \"Kb\") ## 782.4 Kb cca |>   tfb(verbose = FALSE) |>   object.size() |>   print(units = \"Kb\") ## 183.1 Kb"},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"tfb_spline-spline-basis","dir":"Articles","previous_headings":"tf-Class: Definition > tf subclass: tfb","what":"tfb_spline: spline basis","title":"tf Vectors and Operations","text":"default tfb() accepts arguments mgcv’s s()-syntax: basis type bs, basis dimension k, penalty order m, etc… exponential families also: \\(t\\)-distribution, ZI-Poisson, Beta, …","code":"cca_five_b <- cca_five |> tfb() ## Percentage of input data variability preserved in basis representation ## (per functional observation, approximate): ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##   95.60   96.40   96.90   97.12   98.00   98.70 cca_five_b[1:2] ## tfb[2] on (0,1) in basis representation: ##  using  s(arg, bs = \"cr\", k = 25, sp = -1)  ## A: (0.000,0.49);(0.011,0.52);(0.022,0.54); ... ## B: (0.000,0.47);(0.011,0.49);(0.022,0.51); ... cca_five[1:2] |> tfb(bs = \"tp\", k = 55) ## Percentage of input data variability preserved in basis representation ## (per functional observation, approximate): ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##   99.10   99.22   99.35   99.35   99.47   99.60 ## tfb[2] on (0,1) in basis representation: ##  using  s(arg, bs = \"tp\", k = 55, sp = -1)  ## A: (0.000,0.49);(0.011,0.52);(0.022,0.54); ... ## B: (0.000,0.47);(0.011,0.49);(0.022,0.50); ...  # functions represent ratios in (0,1), so a Beta-distribution is more appropriate: cca_five[1:2] |>   tfb(bs = \"ps\", m = c(2, 1), family = mgcv::betar(link = \"cloglog\")) ## Percentage of input data variability preserved in basis representation ## (on inverse link-scale, per functional observation, approximate): ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##   99.40   99.47   99.55   99.55   99.62   99.70 ## tfb[2] on (0,1) in basis representation: ##  using  s(arg, bs = \"ps\", k = 25, m = c(2, 1), sp = -1)  ## A: (0.000,0.49);(0.011,0.51);(0.022,0.54); ... ## B: (0.000,0.47);(0.011,0.49);(0.022,0.51); ..."},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"penalization","dir":"Articles","previous_headings":"tf-Class: Definition > tf subclass: tfb","what":"Penalization:","title":"tf Vectors and Operations","text":"Function-specific (default), none, prespecified (sp), global:  Right plot shows smoothing function-specific penalization red, without penalization blue, manually set strong smoothing (sp \\(\\0\\)) orange. “Global” smoothing: estimate smoothing parameters subsample (~10%) curves apply geometric mean estimated smoothing parameters smooth curves Advantages: (much) faster optimizing penalization curve scale well larg-ish datasets Disadvantages real borrowing information across curves (sparse functional fragment data, e.g.) still requires observations basis functions per curve subsample miss small subgroups different roughness, -/undersmooth parts data, see . Dataset heterogeneous roughness:","code":"layout(t(1:2)) cca_five |> plot() cca_five_b |> plot(col = \"red\") cca_five |>   tfb(k = 35, penalized = FALSE) |>   lines(col = \"blue\") ## Percentage of input data variability preserved in basis representation ## (per functional observation, approximate): ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##    98.5    98.6    98.7    99.0    99.6    99.6 cca_five |>   tfb(sp = 0.001) |>   lines(col = \"orange\") ## Percentage of input data variability preserved in basis representation ## (per functional observation, approximate): ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##   72.60   75.90   76.50   76.54   77.20   80.50 layout(t(1:3)) clrs <- scales::alpha(sample(viridis(15)), 0.5) plot(raw, main = \"raw\", col = clrs) plot(tfb(raw, k = 55), main = \"separate\", col = clrs) ## Percentage of input data variability preserved in basis representation ## (per functional observation, approximate): ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##   72.20   88.65   94.80   92.06   96.55   97.70 plot(tfb(raw, k = 55, global = TRUE), main = \"global\", col = clrs) ## Using global smoothing parameter sp = 3.25e-05, estimated on subsample of curves. ## Percentage of input data variability preserved in basis representation ## (per functional observation, approximate): ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##   71.20   80.35   86.40   86.46   95.00   96.90"},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"tfb-fpc-based","dir":"Articles","previous_headings":"tf-Class: Definition > tf subclass: tfb","what":"tfb FPC-based","title":"tf Vectors and Operations","text":"uses first eigenfunctions computed simple unregularized (weighted) SVD data matrix default corresponding FPC basis mean function saved tfd-object observed functions linear combinations . amount “smoothing” can controlled (roughly!) setting minimal percentage variance explained pve  tfb_fpc currently implemented data identical (possibly non-equidistant) grids. {refunder} rfr_fpca-functions provide FPCA methods appropriate highly irregular sparse data regularized/smoothed FPCA.","code":"cca_five_fpc <- cca_five |> tfb_fpc(pve = 0.999) cca_five_fpc ## tfb[5] on (0,1) in basis representation: ##  using  4 FPCs  ## A: (0.000,0.49);(0.011,0.52);(0.022,0.54); ... ## B: (0.000,0.47);(0.011,0.49);(0.022,0.50); ... ## C: (0.000,0.50);(0.011,0.51);(0.022,0.54); ... ## D: (0.000,0.40);(0.011,0.42);(0.022,0.44); ... ## E: (0.000,0.40);(0.011,0.41);(0.022,0.40); ...  cca_five_fpc_lowrank <- cca_five |> tfb_fpc(pve = 0.6) cca_five_fpc_lowrank ## tfb[5] on (0,1) in basis representation: ##  using  2 FPCs  ## A: (0.000,0.46);(0.011,0.48);(0.022,0.50); ... ## B: (0.000,0.49);(0.011,0.51);(0.022,0.53); ... ## C: (0.000,0.50);(0.011,0.52);(0.022,0.53); ... ## D: (0.000,0.41);(0.011,0.44);(0.022,0.45); ... ## E: (0.000, 0.4);(0.011, 0.4);(0.022, 0.4); ... layout(t(1:2)) cca_five |> plot() cca_five_fpc |> plot(col = \"red\", ylab = \"tfb_fpc(cca_five)\") cca_five_fpc_lowrank |> lines(col = \"blue\", lty = 2)"},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"tf-class-methods","dir":"Articles","previous_headings":"","what":"tf-Class: Methods","title":"tf Vectors and Operations","text":"tidyfun implements almost types operations available conventional numerical logical vectors tf-vectors well, can:","code":""},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"subset-subassign","dir":"Articles","previous_headings":"tf-Class: Methods","what":"subset & subassign:","title":"tf Vectors and Operations","text":"","code":"cca_five[1:2] ## tfd[2] on (0,1) based on 93 evaluations each ## interpolation by tf_approx_spline  ## A: (0.000,0.49);(0.011,0.52);(0.022,0.54); ... ## B: (0.000,0.47);(0.011,0.49);(0.022,0.50); ... cca_five[1:2] <- cca_five[2:1] cca_five ## tfd[5] on (0,1) based on 93 evaluations each ## interpolation by tf_approx_spline  ## B: (0.000,0.47);(0.011,0.49);(0.022,0.50); ... ## A: (0.000,0.49);(0.011,0.52);(0.022,0.54); ... ## C: (0.000,0.50);(0.011,0.51);(0.022,0.54); ... ## D: (0.000,0.40);(0.011,0.42);(0.022,0.44); ... ## E: (0.000,0.40);(0.011,0.41);(0.022,0.40); ..."},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"compare-compute","dir":"Articles","previous_headings":"tf-Class: Methods","what":"compare & compute:","title":"tf Vectors and Operations","text":"","code":"cca_five[1] + cca_five[1] == 2 * cca_five[1] ## [1] TRUE log(exp(cca_five[2])) == cca_five[2] ## [1] TRUE (cca_five - (2:-2)) != cca_five ## [1]  TRUE  TRUE FALSE  TRUE  TRUE"},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"summarize-across-a-vector-of-functions","dir":"Articles","previous_headings":"tf-Class: Methods","what":"summarize across a vector of functions:","title":"tf Vectors and Operations","text":"Compute functional summaries like mean functions, functional standard deviations variances functional data depths vector functional data:","code":"c(mean = mean(cca_five), sd = sd(cca_five)) ## tfd[2] on (0,1) based on 93 evaluations each ## interpolation by tf_approx_spline  ## mean: (0.000, 0.45);(0.011, 0.47);(0.022, 0.48); ... ## sd: (0.000,0.049);(0.011,0.052);(0.022,0.062); ...  tf_depth(cca_five) ## Modified Band-2 Depth (à la Sun/Genton/Nychka, 2012), others to come. ##         B         A         C         D         E  ## 0.6108696 0.6467391 0.6597826 0.5728261 0.5097826 median(cca_five) == cca_five[which.max(tf_depth(cca_five))] ##    C  ## TRUE summary(cca_five) ## tfd[5] on (0,1) based on 93 evaluations each ## interpolation by tf_approx_spline  ## mean: (0.000,  0.45);(0.011,  0.47);(0.022,  0.48); ... ## var: (0.000,0.0024);(0.011,0.0027);(0.022,0.0038); ... ## median: (0.000,  0.50);(0.011,  0.51);(0.022,  0.54); ... ## upper_mid: (0.000,  0.40);(0.011,  0.41);(0.022,  0.40); ... ## lower_mid: (0.000,  0.47);(0.011,  0.49);(0.022,  0.50); ..."},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"summarize-each-function-over-its-domain","dir":"Articles","previous_headings":"tf-Class: Methods","what":"summarize each function over its domain:","title":"tf Vectors and Operations","text":"Compute summaries function like mean extreme values, quantiles, etc. tf_fwise can used define custom statistics function can depend value arg. addition, tidyfun provides methods operations specific functional data:","code":"tf_fmean(cca_five) # mean of each function's evaluations ##         B         A         C         D         E  ## 0.5202229 0.5266713 0.5090638 0.5308612 0.4661378 tf_fmax(cca_five) # max of each function's evaluations ##         B         A         C         D         E  ## 0.6269639 0.6556130 0.6747586 0.6135842 0.6075271 # 25%-tile of each f(t) for t > .5: tf_fwise(cca_five, \\(x) quantile(x$value[x$arg > 0.5], prob = 0.25)) |> unlist() ##     B.25%     A.25%     C.25%     D.25%     E.25%  ## 0.4747946 0.4675452 0.4650627 0.4770205 0.4462774"},{"path":[]},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"evaluate","dir":"Articles","previous_headings":"tf-Class: Methods > Methods for “functional” operations","what":"evaluate:","title":"tf Vectors and Operations","text":"tf-objects special [-operator: second argument specifies argument values evaluate functions additional options, ’s easy get point values tf objects, matrix data.frame formats:","code":"cca_five[1:2, seq(0, 1, length.out = 3)] ##           0       0.5         1 ## B 0.4721627 0.4984125 0.5802742 ## A 0.4909345 0.5307563 0.5904773 ## attr(,\"arg\") ## [1] 0.0 0.5 1.0 cca_five[\"B\", seq(0, 0.15, length.out = 3), interpolate = FALSE] ##           0 0.075 0.15 ## B 0.4721627    NA   NA ## attr(,\"arg\") ## [1] 0.000 0.075 0.150 cca_five[1:2, seq(0, 1, length.out = 7), matrix = FALSE] |> str() ## List of 2 ##  $ B:'data.frame':   7 obs. of  2 variables: ##   ..$ arg  : num [1:7] 0 0.167 0.333 0.5 0.667 ... ##   ..$ value: num [1:7] 0.472 0.475 0.476 0.498 0.475 ... ##  $ A:'data.frame':   7 obs. of  2 variables: ##   ..$ arg  : num [1:7] 0 0.167 0.333 0.5 0.667 ... ##   ..$ value: num [1:7] 0.491 0.521 0.504 0.531 0.472 ..."},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"simple-local-smoothing","dir":"Articles","previous_headings":"tf-Class: Methods > Methods for “functional” operations","what":"(simple, local) smoothing","title":"tf Vectors and Operations","text":"","code":"layout(t(1:3)) cca_five |> plot(alpha = 0.2, ylab = \"lowess\") cca_five |>   tf_smooth(\"lowess\") |>   lines(col = pal_5) ## using f = 0.15 as smoother span for lowess  cca_five |> plot(alpha = 0.2, ylab = \"rolling median (k=5)\") cca_five |>   tf_smooth(\"rollmedian\", k = 5) |>   lines(col = pal_5) ## Warning: non-equidistant arg-values in 'cca_five' ignored by rollmedian. ## setting fill = 'extend' for start/end values.  cca_five |> plot(alpha = 0.2, ylab = \"Savitzky-Golay (quartic, 11 steps)\") cca_five |>   tf_smooth(\"savgol\", fl = 11) |>   lines(col = pal_5) ## Warning: non-equidistant arg-values in 'cca_five' ignored by savgol."},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"differentiate-integrate","dir":"Articles","previous_headings":"tf-Class: Methods > Methods for “functional” operations","what":"differentiate & integrate:","title":"tf Vectors and Operations","text":"","code":"layout(t(1:3)) cca_five |> plot(col = pal_5) cca_five |>   tf_smooth() |>   tf_derive() |>   plot(col = pal_5, ylab = \"tf_derive(tf_smooth(cca_five))\") ## using f = 0.15 as smoother span for lowess cca_five |>   tf_integrate(definite = FALSE) |>   plot(col = pal_5) cca_five |> tf_integrate() ##         B         A         C         D         E  ## 0.5202229 0.5266713 0.5090638 0.5308612 0.4661378"},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"query","dir":"Articles","previous_headings":"tf-Class: Methods > Methods for “functional” operations","what":"query","title":"tf Vectors and Operations","text":"tidyfun makes easy find (ranges ) arguments \\(t\\) satisfying condition value \\(f(t)\\) (argument \\(t\\)):","code":"cca_five |> tf_anywhere(value > 0.65) ##     B     A     C     D     E  ## FALSE  TRUE  TRUE FALSE FALSE cca_five[1:2] |> tf_where(value > 0.6, \"all\") ## $B ## [1] 0.07608696 0.89130435 0.90217391 0.91304348 0.92391304 0.96739130 0.97826087 ##  ## $A ##  [1] 0.05434783 0.06521739 0.07608696 0.08695652 0.09782609 0.10869565 ##  [7] 0.11956522 0.13043478 0.14130435 0.95652174 0.96739130 0.97826087 cca_five[2] |> tf_where(value > 0.6, \"range\") ##        begin       end ## A 0.05434783 0.9782609 cca_five |> tf_where(value > 0.6 & arg > 0.5, \"first\") ##         B         A         C         D         E  ## 0.8913043 0.9565217 0.9565217 0.9347826 0.9347826"},{"path":"https://tidyfun.github.io/tidyfun/articles/x01_tf_Vectors.html","id":"zoom-query","dir":"Articles","previous_headings":"tf-Class: Methods > Methods for “functional” operations","what":"zoom & query","title":"tf Vectors and Operations","text":"","code":"cca_five |> plot(xlim = c(-0.15, 1), col = pal_5, lwd = 2) text(x = -0.1, y = cca_five[, 0.07], labels = names(cca_five), col = pal_5, cex = 1.5) median(cca_five) |> lines(col = pal_5[3], lwd = 4) # where are the first maxima of these functions? cca_five |> tf_where(value == max(value), \"first\") ##          B          A          C          D          E  ## 0.90217391 0.07608696 1.00000000 0.10869565 0.93478261  # where are the first maxima of the later part (t > .5) of these functions? cca_five[c(\"A\", \"D\")] |>   tf_zoom(0.5, 1) |>   tf_where(value == max(value), \"first\") ##         A         D  ## 0.9673913 0.9565217  # which f_i(t) are below the functional median anywhere for 0.2 < t < 0.6? # (t() needed here so we're comparing column vectors to column vectors...) cca_five |>   tf_zoom(0.2, 0.6) |>   tf_anywhere(value <= t(median(cca_five)[, arg])) ##     B     A     C     D     E  ##  TRUE FALSE  TRUE FALSE  TRUE"},{"path":"https://tidyfun.github.io/tidyfun/articles/x02_Conversion.html","id":"conversion-from-matrices","dir":"Articles","previous_headings":"","what":"Conversion from matrices","title":"Converting to & from `tf`","text":"One common structures storing functional data matrix. Especially subjects observed (regular irregular) grid, natural observations subject rows (columns) matrix. Matrices, however, difficult wrangle along data data frame, leading confusing easy--break subsetting across several objects. following examples, ’ll use tfd get tf vector matrices. tfd function expects data organized row functional observation single subject. ’s possible focus resulting tf vector, keeping broader goals tidyfun ’ll add columns data frame. DTI data refund package popular example functional data analysis. code , create data frame (tibble) containing scalar covariates, add columns cca rcst track profiles. code used create tidyfun::dti_df dataset included package. tfd, first argument matrix; arg defines grid functions observed. output tfd vector, include dti_df data frame. Finally, ’ll make quick spaghetti plot illustrate complete functional data included tf column.  ’ll repeat basic process using second, probably even--perennial, functional data example: Canadian weather data fda package. , functional data stored three-dimensional array, dimensions corresponding day, station, outcome (temperature, precipitation, log10 precipitation). following, first create tibble scalar covariates, use tfd create functional data vectors, finally include resulting vectors dataframe. case, args days year, use tf_smooth smooth precipitation outcome. original data matrices record different observations columns instead rows, use transpose call tfd: resulting data frame shown . plot containing functional observations shown .","code":"dti_df <- tibble(   id = refund::DTI$ID,   visit = refund::DTI$visit,   sex = refund::DTI$sex,   case = factor(ifelse(refund::DTI$case, \"MS\", \"control\")) )  dti_df$cca <- tfd(refund::DTI$cca, arg = seq(0, 1, length.out = 93)) dti_df$rcst <- tfd(refund::DTI$rcst, arg = seq(0, 1, length.out = 55)) dti_df ## # A tibble: 382 × 6 ##       id visit sex    case                                                  cca ##    <dbl> <int> <fct>  <fct>                                          <tfd_irrg> ##  1  1001     1 female control  [1]: (0.000,0.49);(0.011,0.52);(0.022,0.54); ... ##  2  1002     1 female control  [2]: (0.000,0.47);(0.011,0.49);(0.022,0.50); ... ##  3  1003     1 male   control  [3]: (0.000,0.50);(0.011,0.51);(0.022,0.54); ... ##  4  1004     1 male   control  [4]: (0.000,0.40);(0.011,0.42);(0.022,0.44); ... ##  5  1005     1 male   control  [5]: (0.000,0.40);(0.011,0.41);(0.022,0.40); ... ##  6  1006     1 male   control  [6]: (0.000,0.45);(0.011,0.45);(0.022,0.46); ... ##  7  1007     1 male   control  [7]: (0.000,0.55);(0.011,0.56);(0.022,0.56); ... ##  8  1008     1 male   control  [8]: (0.000,0.45);(0.011,0.48);(0.022,0.50); ... ##  9  1009     1 male   control  [9]: (0.000,0.50);(0.011,0.51);(0.022,0.52); ... ## 10  1010     1 male   control [10]: (0.000,0.46);(0.011,0.47);(0.022,0.48); ... ## # ℹ 372 more rows ## # ℹ 1 more variable: rcst <tfd_irrg> dti_df |>   ggplot() +   geom_spaghetti(aes(y = cca, col = case, alpha = 0.2 + 0.4 * (case == \"control\"))) +   facet_wrap(~sex) +   scale_alpha(guide = \"none\", range = c(0.2, 0.4)) canada <- tibble(   place = fda::CanadianWeather$place,   region = fda::CanadianWeather$region,   lat = fda::CanadianWeather$coordinates[, 1],   lon = -fda::CanadianWeather$coordinates[, 2] ) |>   mutate(     temp = t(fda::CanadianWeather$dailyAv[, , 1]) |>       tfd(arg = 1:365),     precipl10 = t(fda::CanadianWeather$dailyAv[, , 3]) |>       tfd(arg = 1:365) |>       tf_smooth()   ) ## using f = 0.15 as smoother span for lowess canada ## # A tibble: 35 × 6 ##    place       region     lat   lon                               temp ##    <chr>       <chr>    <dbl> <dbl>                          <tfd_reg> ##  1 St. Johns   Atlantic  47.3 -52.4  [1]: (1, -4);(2, -3);(3, -3); ... ##  2 Halifax     Atlantic  44.4 -63.4  [2]: (1, -4);(2, -4);(3, -5); ... ##  3 Sydney      Atlantic  46.1 -60.1  [3]: (1, -4);(2, -4);(3, -5); ... ##  4 Yarmouth    Atlantic  43.5 -66.1  [4]: (1, -1);(2, -2);(3, -2); ... ##  5 Charlottvl  Atlantic  42.5 -80.2  [5]: (1, -6);(2, -6);(3, -7); ... ##  6 Fredericton Atlantic  45.6 -66.4  [6]: (1, -8);(2, -8);(3, -9); ... ##  7 Scheffervll Atlantic  54.5 -64.5  [7]: (1,-22);(2,-23);(3,-23); ... ##  8 Arvida      Atlantic  48.3 -71.1  [8]: (1,-14);(2,-14);(3,-15); ... ##  9 Bagottville Atlantic  48.2 -70.5  [9]: (1,-15);(2,-15);(3,-16); ... ## 10 Quebec      Atlantic  46.5 -71.1 [10]: (1,-11);(2,-11);(3,-12); ... ## # ℹ 25 more rows ## # ℹ 1 more variable: precipl10 <tfd_reg> temp_panel <- canada |>   ggplot(aes(y = temp, color = region)) +   geom_spaghetti()  precip_panel <- canada |>   ggplot(aes(y = precipl10, color = region)) +   geom_spaghetti()  gridExtra::grid.arrange(temp_panel, precip_panel, nrow = 1)"},{"path":[]},{"path":"https://tidyfun.github.io/tidyfun/articles/x02_Conversion.html","id":"in-long-format","dir":"Articles","previous_headings":"Conversion to tf from a data frame","what":"… in “long” format","title":"Converting to & from `tf`","text":"“Long” format data frames containing functional data include columns containing subject identifier, functional argument, value subject’s function takes argument. also often (always) non-functional covariates repeated within subject. data form, use tf_nest produce data frame containing single row subject. first example pig weight data SemiPar package, nice example longitudinal data analysis. includes columns id.num, num.weeks, weight – correspond subject, argument, value. create pig_df nesting weight within subject. result data frame containing single row pig, columns id.num weight function. ’ll make quick plot show result.  second example uses ALA::fev1 dataset. ALA available CRAN can installed using line . dataset, height logFEV1 observed multiple ages child; , two functions observed simultaneously, shared argument. can use tf_nest create dataframe single row subject, includes non-functional covariates (like age height baseline), functional observations logFEV1 height.","code":"data(\"pig.weights\", package = \"SemiPar\")  pig.weights <- as_tibble(pig.weights)  pig.weights ## # A tibble: 432 × 3 ##    id.num num.weeks weight ##     <int>     <int>  <dbl> ##  1      1         1   24   ##  2      1         2   32   ##  3      1         3   39   ##  4      1         4   42.5 ##  5      1         5   48   ##  6      1         6   54.5 ##  7      1         7   61   ##  8      1         8   65   ##  9      1         9   72   ## 10      2         1   22.5 ## # ℹ 422 more rows pig_df <- pig.weights |>   tf_nest(weight, .id = id.num, .arg = num.weeks)  pig_df ## # A tibble: 48 × 2 ##    id.num                          weight ##     <int>                       <tfd_reg> ##  1      1  [1]: (1,24);(2,32);(3,39); ... ##  2      2  [2]: (1,22);(2,30);(3,40); ... ##  3      3  [3]: (1,22);(2,28);(3,36); ... ##  4      4  [4]: (1,24);(2,32);(3,40); ... ##  5      5  [5]: (1,24);(2,32);(3,37); ... ##  6      6  [6]: (1,23);(2,30);(3,36); ... ##  7      7  [7]: (1,22);(2,28);(3,36); ... ##  8      8  [8]: (1,24);(2,30);(3,38); ... ##  9      9  [9]: (1,20);(2,28);(3,33); ... ## 10     10 [10]: (1,26);(2,32);(3,40); ... ## # ℹ 38 more rows pig_df |>   ggplot(aes(y = weight)) +   geom_spaghetti() install.packages(\"ALA\", repos = \"http://R-Forge.R-project.org\") ALA::fev1 |> glimpse() ## Rows: 1,994 ## Columns: 6 ## $ id      <fct> 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, … ## $ age     <dbl> 9.3415, 10.3929, 11.4524, 12.4600, 13.4182, 15.4743, 16.3723, 6.5873, 7.6496, 12.7392, 13.7741, 14.6940, 15.… ## $ height  <dbl> 1.20, 1.28, 1.33, 1.42, 1.48, 1.50, 1.52, 1.13, 1.19, 1.49, 1.53, 1.55, 1.56, 1.57, 1.57, 1.18, 1.23, 1.30, … ## $ age0    <dbl> 9.3415, 9.3415, 9.3415, 9.3415, 9.3415, 9.3415, 9.3415, 6.5873, 6.5873, 6.5873, 6.5873, 6.5873, 6.5873, 6.58… ## $ height0 <dbl> 1.20, 1.20, 1.20, 1.20, 1.20, 1.20, 1.20, 1.13, 1.13, 1.13, 1.13, 1.13, 1.13, 1.13, 1.13, 1.18, 1.18, 1.18, … ## $ logFEV1 <dbl> 0.21511, 0.37156, 0.48858, 0.75142, 0.83291, 0.89200, 0.87129, 0.30748, 0.35066, 0.75612, 0.86710, 1.04732, … ALA::fev1 |>   group_by(id) |>   mutate(n_obs = n()) |>   filter(n_obs > 1) |>   tf_nest(logFEV1, height, .arg = age) |>   glimpse() ## Rows: 252 ## Columns: 6 ## $ id      <fct> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 3… ## $ age0    <dbl> 9.3415, 6.5873, 6.9131, 6.7598, 6.5024, 6.8994, 6.4339, 7.1869, 6.8966, 7.7892, 7.6140, 7.5483, 7.8412, 6.50… ## $ height0 <dbl> 1.20, 1.13, 1.18, 1.15, 1.11, 1.24, 1.18, 1.27, 1.17, 1.13, 1.32, 1.25, 1.25, 1.20, 1.19, 1.24, 1.21, 1.23, … ## $ n_obs   <int> 7, 8, 9, 10, 7, 11, 7, 9, 9, 10, 6, 3, 5, 11, 12, 10, 9, 8, 12, 2, 2, 11, 11, 7, 9, 11, 11, 4, 2, 12, 3, 9, … ## $ logFEV1 <tfd_irrg> [<9.3415, 10.3929, 11.4524, 12.4600, 13.4182, 15.4743, 16.3723>, <0.21511, 0.37156, 0.48858, 0.75142, 0… ## $ height  <tfd_irrg> [<9.3415, 10.3929, 11.4524, 12.4600, 13.4182, 15.4743, 16.3723>, <1.20, 1.28, 1.33, 1.42, 1.48, 1.50, 1…"},{"path":"https://tidyfun.github.io/tidyfun/articles/x02_Conversion.html","id":"in-wide-format","dir":"Articles","previous_headings":"Conversion to tf from a data frame","what":"… in “wide” format","title":"Converting to & from `tf`","text":"cases functional data stored “wide” format, meaning separate columns argument, values stored columns. case, tf_gather can use collapse across columns produce function subject. example uses refund::DTI dataset. use tf_gather transfer cca observations matrix column (NAs) column irregularly observed functions (tfd_irreg).","code":"dti_df <- refund::DTI |>   janitor::clean_names() |>   select(-starts_with(\"rcst\")) |>   glimpse() ## Rows: 382 ## Columns: 8 ## $ id         <dbl> 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,… ## $ visit      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… ## $ visit_time <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ nscans     <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… ## $ case       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ sex        <fct> female, female, male, male, male, male, male, male, male, m… ## $ pasat      <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ cca        <dbl[,93]> <matrix[26 x 93]>  dti_df |>   tf_gather(starts_with(\"cca\")) |>   glimpse() ## creating new tfd-column <cca> ## Rows: 382 ## Columns: 8 ## $ id         <dbl> 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,… ## $ visit      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… ## $ visit_time <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ nscans     <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… ## $ case       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ sex        <fct> female, female, male, male, male, male, male, male, male, m… ## $ pasat      <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ cca        <tfd_irrg> [<1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…"},{"path":"https://tidyfun.github.io/tidyfun/articles/x02_Conversion.html","id":"other-formats","dir":"Articles","previous_headings":"","what":"Other formats","title":"Converting to & from `tf`","text":"fda fd coming soon …","code":""},{"path":"https://tidyfun.github.io/tidyfun/articles/x02_Conversion.html","id":"reversing-the-conversion","dir":"Articles","previous_headings":"","what":"Reversing the conversion","title":"Converting to & from `tf`","text":"tidyfun includes wide range tools exploratory analysis visualization, many analysis approaches require data stored traditional formats. Several functions available aid conversion.","code":""},{"path":"https://tidyfun.github.io/tidyfun/articles/x02_Conversion.html","id":"conversion-from-tf-to-data-frames","dir":"Articles","previous_headings":"Reversing the conversion","what":"Conversion from tf to data frames","title":"Converting to & from `tf`","text":"functions tf_unnest tf_spread reverse operations tf_nest tf_gather, respectively – , take data frame functional observation produce long wide data frames. ’ll illustrate pig_df data set. First, produce long-format data frame, one can use tf_unnest: produce wide-format data frame, one can use tf_spread:","code":"pig_df |>   tf_unnest(cols = weight) |>   glimpse() ## Rows: 432 ## Columns: 3 ## $ id.num       <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, … ## $ weight_arg   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, … ## $ weight_value <dbl> 24.0, 32.0, 39.0, 42.5, 48.0, 54.5, 61.0, 65.0, 72.0, 22.… pig_df |>   tf_spread() |>   glimpse() ## Rows: 48 ## Columns: 10 ## $ id.num   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18… ## $ weight_1 <dbl> 24.0, 22.5, 22.5, 24.0, 24.5, 23.0, 22.5, 23.5, 20.0, 25.5, 2… ## $ weight_2 <dbl> 32.0, 30.5, 28.0, 31.5, 31.5, 30.0, 28.5, 30.5, 27.5, 32.5, 3… ## $ weight_3 <dbl> 39.0, 40.5, 36.5, 39.5, 37.0, 35.5, 36.0, 38.0, 33.0, 39.5, 4… ## $ weight_4 <dbl> 42.5, 45.0, 41.0, 44.5, 42.5, 41.0, 43.5, 41.0, 39.0, 47.0, 4… ## $ weight_5 <dbl> 48.0, 51.0, 47.5, 51.0, 48.0, 48.0, 47.0, 48.5, 43.5, 53.0, 5… ## $ weight_6 <dbl> 54.5, 58.5, 55.0, 56.0, 54.0, 51.5, 53.5, 55.0, 49.0, 58.5, 5… ## $ weight_7 <dbl> 61.0, 64.0, 61.0, 59.5, 58.0, 56.5, 59.5, 59.5, 54.5, 63.0, 6… ## $ weight_8 <dbl> 65.0, 72.0, 68.0, 64.0, 63.0, 63.5, 67.5, 66.5, 59.5, 69.5, 6… ## $ weight_9 <dbl> 72.0, 78.0, 76.0, 67.0, 65.5, 69.5, 73.5, 73.0, 65.0, 76.0, 7…"},{"path":"https://tidyfun.github.io/tidyfun/articles/x02_Conversion.html","id":"converting-back-to-a-matrix-or-data-frame","dir":"Articles","previous_headings":"Reversing the conversion","what":"Converting back to a matrix or data frame","title":"Converting to & from `tf`","text":"convert tf vector matrix row containing function evaluations one function, use .matrix: convert tf vector standalone data frame \"id\",\"arg\",\"value\"-columns, use .data.frame() unnest = TRUE:","code":"weight_vec <- pig_df$weight  weight_matrix <- weight_vec |> as.matrix()  head(weight_matrix) ##      1    2    3    4    5    6    7    8    9 ## 1 24.0 32.0 39.0 42.5 48.0 54.5 61.0 65.0 72.0 ## 2 22.5 30.5 40.5 45.0 51.0 58.5 64.0 72.0 78.0 ## 3 22.5 28.0 36.5 41.0 47.5 55.0 61.0 68.0 76.0 ## 4 24.0 31.5 39.5 44.5 51.0 56.0 59.5 64.0 67.0 ## 5 24.5 31.5 37.0 42.5 48.0 54.0 58.0 63.0 65.5 ## 6 23.0 30.0 35.5 41.0 48.0 51.5 56.5 63.5 69.5  # argument values of input data saved in `arg`-attribute: attr(weight_matrix, \"arg\") ## [1] 1 2 3 4 5 6 7 8 9 weight_vec ## tfd[48] on (1,9) based on 9 evaluations each ## interpolation by tf_approx_linear  ## 1: (1,24);(2,32);(3,39); ... ## 2: (1,22);(2,30);(3,40); ... ## 3: (1,22);(2,28);(3,36); ... ## 4: (1,24);(2,32);(3,40); ... ## 5: (1,24);(2,32);(3,37); ... ##     [....]   (43 not shown)  weight_vec |>   as.data.frame(unnest = TRUE) |>   head() ##     id arg value ## 1.1  1   1  24.0 ## 1.2  1   2  32.0 ## 1.3  1   3  39.0 ## 1.4  1   4  42.5 ## 1.5  1   5  48.0 ## 1.6  1   6  54.5"},{"path":"https://tidyfun.github.io/tidyfun/articles/x03_Data_Wrangling.html","id":"data-manipulation-using-tidyfun","dir":"Articles","previous_headings":"","what":"Data manipulation using tidyfun","title":"Data Wrangling","text":"goal tidyfun provide accessible well-documented software makes functional data analysis R easy. vignette, explore aspects data manipulation possible using tidyfun, emphasizing compatibility tidyverse. vignettes examined tfd & tfb data types, convert common formats functional data (e.g. matrices, long- wide-format data frames, fda objects) new data types. goal “tidy” data manipulation functional data analysis, result data conversion processes data frame column contains functional data interest. vignette starts point. Throughout, make use visualization tools – explained detail visualization vignette.","code":""},{"path":"https://tidyfun.github.io/tidyfun/articles/x03_Data_Wrangling.html","id":"example-datasets","dir":"Articles","previous_headings":"","what":"Example datasets","title":"Data Wrangling","text":"datasets used vignette tidyfun::chf_df tidyfun::dti_df dataset. first contains minute--minute observations log activity counts (stored tfd vector called activity) seven days 47 subjects congestive heart failure. addition id activity, observe several covariates. quick plot first 5 curves:  tidyfun::dti_df contains fractional anisotropy (FA) tract profiles corpus callosum (cca) right corticospinal tract (rcst), along several covariates. quick plot cca tract profiles .","code":"data(chf_df)  chf_df ## # A tibble: 329 × 8 ##       id gender   age   bmi event_week event_type day   ##    <dbl> <chr>  <dbl> <dbl>      <dbl> <chr>      <ord> ##  1     1 Male      41    26         41 .          Mon   ##  2     1 Male      41    26         41 .          Tue   ##  3     1 Male      41    26         41 .          Wed   ##  4     1 Male      41    26         41 .          Thu   ##  5     1 Male      41    26         41 .          Fri   ##  6     1 Male      41    26         41 .          Sat   ##  7     1 Male      41    26         41 .          Sun   ##  8     3 Female    81    21         32 .          Mon   ##  9     3 Female    81    21         32 .          Tue   ## 10     3 Female    81    21         32 .          Wed   ## # ℹ 319 more rows ## # ℹ 1 more variable: activity <tfd_reg> chf_df |>   slice(1:5) |>   ggplot(aes(y = activity)) +   geom_spaghetti(alpha = 0.1) data(dti_df)  dti_df ## # A tibble: 382 × 6 ##       id visit sex    case                                                  cca ##    <dbl> <int> <fct>  <fct>                                          <tfd_irrg> ##  1  1001     1 female control  [1]: (0.000,0.49);(0.011,0.52);(0.022,0.54); ... ##  2  1002     1 female control  [2]: (0.000,0.47);(0.011,0.49);(0.022,0.50); ... ##  3  1003     1 male   control  [3]: (0.000,0.50);(0.011,0.51);(0.022,0.54); ... ##  4  1004     1 male   control  [4]: (0.000,0.40);(0.011,0.42);(0.022,0.44); ... ##  5  1005     1 male   control  [5]: (0.000,0.40);(0.011,0.41);(0.022,0.40); ... ##  6  1006     1 male   control  [6]: (0.000,0.45);(0.011,0.45);(0.022,0.46); ... ##  7  1007     1 male   control  [7]: (0.000,0.55);(0.011,0.56);(0.022,0.56); ... ##  8  1008     1 male   control  [8]: (0.000,0.45);(0.011,0.48);(0.022,0.50); ... ##  9  1009     1 male   control  [9]: (0.000,0.50);(0.011,0.51);(0.022,0.52); ... ## 10  1010     1 male   control [10]: (0.000,0.46);(0.011,0.47);(0.022,0.48); ... ## # ℹ 372 more rows ## # ℹ 1 more variable: rcst <tfd_irrg> dti_df |>   ggplot(aes(y = cca)) +   geom_spaghetti(alpha = 0.05)"},{"path":"https://tidyfun.github.io/tidyfun/articles/x03_Data_Wrangling.html","id":"existing-tidyverse-functions","dir":"Articles","previous_headings":"","what":"Existing tidyverse functions","title":"Data Wrangling","text":"Dataframes using tidyfun store functional observations can manipulated using tools dplyr, including select filter:  Operations using group_by summarize also work – let’s look daily averages activity profiles:  One can mutate functional observations – exponentiate log activity counts obtain original recordings:  Functions data manipulation tidyr also supported. illustrate using pivot_wider create new tfd-columns containing activity profiles day week: (Note made data less “tidy” therefore generally recommended, may useful cases). ’s also possible join datasets based non-functional keys. illustrate, ’ll first create pair datasets: can joined using id variable key (tidied using pivot_longer): Similar tidying can done DTI data – let’s look average RCST tract values gender case status:","code":"chf_df |>   select(id, day, activity) |>   filter(day == \"Mon\") |>   ggplot(aes(y = activity)) +   geom_spaghetti(alpha = 0.05) chf_df |>   group_by(day) |>   summarize(mean_act = mean(activity)) |>   ggplot(aes(y = mean_act, color = day)) +   geom_spaghetti() chf_df |>   slice(1:5) |>   mutate(exp_act = exp(activity)) |>   ggplot(aes(y = exp_act)) +   geom_spaghetti(alpha = 0.2) chf_df |>   select(id, day, activity) |>   pivot_wider(     names_from = day,     values_from = activity   ) ## # A tibble: 47 × 8 ##       id                          Mon                          Tue ##    <dbl>                    <tfd_reg>                    <tfd_reg> ##  1     1  [1]: (1,0);(2,0);(3,0); ...  [1]: (1,0);(2,0);(3,5); ... ##  2     3  [2]: (1,3);(2,5);(3,5); ...  [2]: (1,0);(2,5);(3,6); ... ##  3     4  [3]: (1,0);(2,0);(3,0); ...  [3]: (1,4);(2,0);(3,3); ... ##  4     5  [4]: (1,5);(2,4);(3,5); ...  [4]: (1,4);(2,6);(3,7); ... ##  5     6  [5]: (1,0);(2,7);(3,0); ...  [5]: (1,0);(2,0);(3,0); ... ##  6     7  [6]: (1,5);(2,7);(3,5); ...  [6]: (1,4);(2,2);(3,5); ... ##  7     8  [7]: (1,0);(2,0);(3,0); ...  [7]: (1,0);(2,0);(3,0); ... ##  8     9  [8]: (1,0);(2,0);(3,0); ...  [8]: (1,2);(2,0);(3,0); ... ##  9    10  [9]: (1,0);(2,4);(3,0); ...  [9]: (1,0);(2,0);(3,0); ... ## 10    11 [10]: (1,0);(2,0);(3,0); ... [10]: (1,0);(2,0);(3,0); ... ## # ℹ 37 more rows ## # ℹ 5 more variables: Wed <tfd_reg>, Thu <tfd_reg>, Fri <tfd_reg>, ## #   Sat <tfd_reg>, Sun <tfd_reg> monday_df <- chf_df |>   filter(day == \"Mon\") |>   select(id, monday_act = activity) friday_df <- chf_df |>   filter(day == \"Fri\") |>   select(id, friday_act = activity) monday_df |>   left_join(friday_df, by = \"id\") |>   pivot_longer(monday_act:friday_act, names_to = \"day\", values_to = \"activity\") ## # A tibble: 94 × 3 ##       id day                            activity ##    <dbl> <chr>                         <tfd_reg> ##  1     1 monday_act  [1]: (1,0);(2,0);(3,0); ... ##  2     1 friday_act  [2]: (1,6);(2,0);(3,0); ... ##  3     3 monday_act  [3]: (1,3);(2,5);(3,5); ... ##  4     3 friday_act  [4]: (1,6);(2,6);(3,6); ... ##  5     4 monday_act  [5]: (1,0);(2,0);(3,0); ... ##  6     4 friday_act  [6]: (1,0);(2,0);(3,0); ... ##  7     5 monday_act  [7]: (1,5);(2,4);(3,5); ... ##  8     5 friday_act  [8]: (1,6);(2,2);(3,6); ... ##  9     6 monday_act  [9]: (1,0);(2,7);(3,0); ... ## 10     6 friday_act [10]: (1,0);(2,0);(3,0); ... ## # ℹ 84 more rows dti_df |>   group_by(case, sex) |>   summarize(mean_rcst = mean(rcst, na.rm = TRUE)) |>   ggplot(aes(y = mean_rcst, color = case)) +   geom_spaghetti(linewidth = 2) +   facet_grid(~sex) ## `summarise()` has grouped output by 'case'. You can override using the ## `.groups` argument."},{"path":"https://tidyfun.github.io/tidyfun/articles/x03_Data_Wrangling.html","id":"new-tidyfun-functions","dir":"Articles","previous_headings":"","what":"New tidyfun functions","title":"Data Wrangling","text":"dplyr functions useful conjunction new functions tidyfun. example, one might use filter tf_anywhere filter based values observed functions:  second example functionality DTI data .  existing mutate function can combined several tidyfun functions, including tf_smooth, tf_zoom, tf_deriv. One can smooth existing observations using tf_smooth:  can combined previous steps, like group_by summarize, build intution descriptive plots summaries:  One can also extract observations subset full domain using tf_zoom:  can also convert tfd tfb inside mutate statement part data processing pipeline: ’s also possible compute derivatives part processing pipeline:","code":"like_to_move_it_move_it <- chf_df |> filter(tf_anywhere(activity, value > 9)) glimpse(like_to_move_it_move_it) ## Rows: 6 ## Columns: 8 ## $ id         <dbl> 34, 34, 34, 35, 35, 35 ## $ gender     <chr> \"Female\", \"Female\", \"Female\", \"Female\", \"Female\", \"Female\" ## $ age        <dbl> 56, 56, 56, 67, 67, 67 ## $ bmi        <dbl> 25, 25, 25, 33, 33, 33 ## $ event_week <dbl> 40, 40, 40, 47, 47, 47 ## $ event_type <chr> \".\", \".\", \".\", \".\", \".\", \".\" ## $ day        <ord> Wed, Thu, Sun, Thu, Fri, Sat ## $ activity   <tfd_reg> <0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000…  like_to_move_it_move_it |>   ggplot(aes(y = activity)) +   geom_spaghetti(aes(colour = id)) dti_df |>   filter(tf_anywhere(cca, value < 0.26)) |>   ggplot(aes(y = cca)) +   geom_spaghetti() chf_df |>   filter(id == 1) |>   mutate(smooth_act = tf_smooth(activity)) |>   ggplot(aes(y = smooth_act)) +   geom_spaghetti() ## using f = 0.15 as smoother span for lowess chf_df |>   group_by(day) |>   summarize(mean_act = mean(activity)) |>   mutate(smooth_mean = tf_smooth(mean_act)) |>   ggplot(aes(y = mean_act, color = day)) +   geom_spaghetti(alpha = 0.2) +   geom_spaghetti(aes(y = smooth_mean), linewidth = 2) ## using f = 0.15 as smoother span for lowess chf_df |>   filter(id == 1) |>   mutate(daytime_act = tf_zoom(activity, 360, 1200)) |>   ggplot(aes(y = daytime_act)) +   geom_spaghetti(alpha = 0.2) dti_df <- dti_df |> mutate(cca_tfb = tfb(cca, k = 25)) ## Percentage of input data variability preserved in basis representation ## (per functional observation, approximate): ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##    88.3    96.7    97.7    97.3    98.3    99.4 dti_df |>   slice(1:10) |>   mutate(     cca_raw_deriv = tf_derive(cca),     cca_tfb_deriv = tf_derive(cca_tfb)   ) |>   ggplot() +   geom_spaghetti(aes(y = cca_raw_deriv), alpha = 0.3, linewidth = 0.3, col = \"blue\") +   geom_spaghetti(aes(y = cca_tfb_deriv), alpha = 0.3, linewidth = 0.3, col = \"red\") +   ylab(\"d/dt f(t)\") ## Warning: There was 1 warning in `mutate()`. ## ℹ In argument: `cca_raw_deriv = tf_derive(cca)`. ## Caused by warning: ## ! Differentiating over irregular grids can be unstable."},{"path":"https://tidyfun.github.io/tidyfun/articles/x04_Visualization.html","id":"plotting-with-ggplot","dir":"Articles","previous_headings":"","what":"Plotting with ggplot","title":"Visualization","text":"ggplot powerful framework visualization. section, ’ll assume basic familiarity package; ’re new ggplot, primer may helpful. tidyfun includes pasta-themed geoms plots functional data: geom_spaghetti lines geom_meatballs (lines &) points gglasagna heatmaps, order-argument arranging lasagna layers / heat map rows. geom_capellini little sparklines / glyphs maps etc. geom_errorband – functional data version geom_ribbon","code":""},{"path":"https://tidyfun.github.io/tidyfun/articles/x04_Visualization.html","id":"geom_spaghetti-and-geom_meatballs","dir":"Articles","previous_headings":"Plotting with ggplot","what":"geom_spaghetti and geom_meatballs","title":"Visualization","text":"One fundamental plots functional data spaghetti plot, implemented tidyfun + ggplot geom_spaghetti:  variant spaghetti plot meatballs plot, shows “noodles” (.e. functional observations visualized curves) “meatballs” (.e. observed data values visualized points).","code":"chf_df |>   filter(id == 1) |>   ggplot(aes(y = activity)) +   geom_spaghetti() chf_df |>   filter(id == 1, day == \"Mon\") |>   ggplot(aes(y = activity)) +   geom_meatballs()"},{"path":"https://tidyfun.github.io/tidyfun/articles/x04_Visualization.html","id":"using-with-other-ggplot-features","dir":"Articles","previous_headings":"Plotting with ggplot","what":"Using with other ggplot features","title":"Visualization","text":"new geoms tidyfun “play nicely” standard ggplot aesthetics options. can, example, define color aesthetic plots tf variables using observations:  can also use facetting:  Another example, using DTI data, .  Together tidyfun’s tools functional data wrangling summary statistics, integration ggplot2 can produce useful exploratory analyses, like plot showing group-wise smoothed unsmoothed mean activity profiles:  … plot showing group-wise mean functions +/- twice pointwise standard errors:","code":"chf_df |>   filter(id %in% 1:5) |>   ggplot(aes(y = activity, color = gender)) +   geom_spaghetti(alpha = 0.2) chf_df |>   filter(day %in% c(\"Mon\", \"Sun\")) |>   ggplot(aes(y = activity, color = gender)) +   geom_spaghetti(alpha = 0.1) +   facet_grid(~day) dti_df |>   ggplot() +   geom_spaghetti(aes(y = cca, col = case, alpha = 0.2 + 0.4 * (case == \"control\"))) +   facet_wrap(~sex) +   scale_alpha(guide = \"none\", range = c(0.2, 0.4)) chf_df |>   group_by(gender, day) |>   summarize(mean_act = mean(activity)) |>   mutate(smooth_mean = tfb(mean_act, verbose = FALSE)) |>   filter(day %in% c(\"Mon\", \"Sun\")) |>   ggplot(aes(y = smooth_mean, color = gender)) +   geom_spaghetti(linewidth = 1.25, alpha = 1) +   geom_meatballs(aes(y = mean_act), alpha = 0.1) +   facet_grid(~day) ## `summarise()` has grouped output by 'gender'. You can override using the ## `.groups` argument. ## Percentage of input data variability preserved in basis representation (per ## functional observation, approximate): Min. 1st Qu.  Median Mean 3rd Qu.  Max. ## 100 100 100 100 100 100 ## Percentage of input data variability preserved in basis representation (per ## functional observation, approximate): Min. 1st Qu.  Median Mean 3rd Qu.  Max. ## 100 100 100 100 100 100 ## Percentage of input data variability preserved in basis representation (per ## functional observation, approximate): Min. 1st Qu.  Median Mean 3rd Qu.  Max. ## 100 100 100 100 100 100 ## Percentage of input data variability preserved in basis representation (per ## functional observation, approximate): Min. 1st Qu.  Median Mean 3rd Qu.  Max. ## 100 100 100 100 100 100 chf_df |>   group_by(gender, day) |>   summarize(     mean_act = mean(activity),     sd_act = sd(activity)   ) |>   group_by(gender, day) |>   mutate(     upper_act = mean_act + 2 * sd_act,     lower_act = mean_act - 2 * sd_act   ) |>   filter(day %in% c(\"Mon\", \"Sun\")) |>   ggplot(aes(y = mean_act, color = gender, fill = gender)) +   geom_spaghetti(alpha = 1) +   geom_errorband(aes(ymax = upper_act, ymin = lower_act), alpha = 0.3) +   facet_grid(day ~ gender) ## `summarise()` has grouped output by 'gender'. You can override using the ## `.groups` argument."},{"path":"https://tidyfun.github.io/tidyfun/articles/x04_Visualization.html","id":"gglasagna","dir":"Articles","previous_headings":"Plotting with ggplot","what":"gglasagna","title":"Visualization","text":"Lasagna plots “saucy alternative spaghetti plots”. variant heatmaps show functional observations rows use color illustrate values taken different arguments. tidyfun, lasagna plots implemented gglasagna. first example, using CHF data, .  somewhat involved example, demonstrating order argument taking advantage facets, next.","code":"chf_df |>   filter(day %in% c(\"Mon\", \"Sun\")) |>   gglasagna(activity) dti_df |>   gglasagna(     tf = cca,     order = tf_integrate(cca, definite = TRUE),     arg = seq(0, 1, length.out = 101)   ) +   theme(axis.text.y = element_text(size = 6)) +   facet_wrap(~case, ncol = 2, scales = \"free\")"},{"path":"https://tidyfun.github.io/tidyfun/articles/x04_Visualization.html","id":"geom_capellini","dir":"Articles","previous_headings":"Plotting with ggplot","what":"geom_capellini","title":"Visualization","text":"illustrate geom_capellini, ’ll start data prep iconic Canadian Weather data: Now can plot map Canada annual temperature averages red, precipitation blue:","code":"canada <- data.frame(   place = fda::CanadianWeather$place,   region = fda::CanadianWeather$region,   lat = fda::CanadianWeather$coordinates[, 1],   lon = -fda::CanadianWeather$coordinates[, 2] )  canada$temp <- tfd(t(fda::CanadianWeather$dailyAv[, , 1]), arg = 1:365) canada$precipl10 <- tfd(t(fda::CanadianWeather$dailyAv[, , 3]), arg = 1:365) |>   tf_smooth() ## using f = 0.15 as smoother span for lowess  canada_map <-   data.frame(maps::map(\"world\", \"Canada\", plot = FALSE)[c(\"x\", \"y\")]) ggplot(canada, aes(x = lon, y = lat)) +   geom_capellini(aes(tf = precipl10),     width = 4, height = 5, colour = \"blue\",     line.linetype = 1   ) +   geom_capellini(aes(tf = temp),     width = 4, height = 5, colour = \"red\",     line.linetype = 1   ) +   geom_path(data = canada_map, aes(x = x, y = y), alpha = 0.1) +   coord_quickmap()"},{"path":"https://tidyfun.github.io/tidyfun/articles/x04_Visualization.html","id":"plotting-with-base-r","dir":"Articles","previous_headings":"","what":"Plotting with base R","title":"Visualization","text":"tidyfun includes several extensions base R graphics, operate tf vectors. example, one can use plot create either spaghetti lasagna plots, lines add lines existing plot:  plot methods use graphics options can edited like base graphics:","code":"cca <- dti_df$cca |>   tfd(arg = seq(0, 1, length.out = 93), interpolate = TRUE)  layout(t(1:2))  plot(cca, type = \"spaghetti\") lines(c(median(cca), mean = mean(cca)), col = c(2, 4))  plot(cca, type = \"lasagna\", col = viridis(50)) cca_five <- cca[1:5]  cca_five |> plot(xlim = c(-0.15, 1), col = pal_5, lwd = 2)  text(   x = -0.1, y = cca_five[, 0.07], labels = names(cca_five), col = pal_5, cex = 1.5 )  median(cca_five) |> lines(col = pal_5[3], lwd = 4)"},{"path":"https://tidyfun.github.io/tidyfun/articles/x05_Advice.html","id":"why-use-tidyfun","dir":"Articles","previous_headings":"","what":"Why use tidyfun","title":"Advice for Developers","text":"start-costs using new data class writing code new methods, reasons adopt class. see several benefits using tidyfun: Compatibility dataframe-centric approach analysis Supporting tools data manipulation Plotting ggplot base R Together, make possible analyze functional data pipeline (import, exploratory analysis, visualization, formal analysis) similar used scalar variables. advantages user-facing – intended make things easier analyzing datasets include functional observations. new methods functional data typically involve working “raw” observations (numeric vectors matrices), implementing methods tidyfun require consideration user interfaces, input objects, data transformations. believe benefits worth effort.","code":""},{"path":"https://tidyfun.github.io/tidyfun/articles/x05_Advice.html","id":"thoughts-on-design","dir":"Articles","previous_headings":"","what":"Thoughts on design","title":"Advice for Developers","text":"tidyfun effective new methods intended part analysis pipeline. starting point, suggest addressing following questions: users’ data organized? input dataframes look like? variables exist addition tf columns? natural user interface function? users specify functional data columns? users expect obtain function? parallels modeling strategies? organize output integrates dataframe-centric analysis approach? functions support tfd, tfb, ? output class matter? supporting tools include? Things like plot predict, can used summarize results? best, users seamless experience across data exploration, modeling, understanding results; tidyfun intended encourage .","code":""},{"path":"https://tidyfun.github.io/tidyfun/articles/x05_Advice.html","id":"using-tidyfun-in-new-functions","dir":"Articles","previous_headings":"","what":"Using tidyfun in new functions","title":"Advice for Developers","text":"anticipate new methods functional data use raw numeric values (vectors matrices) estimation / inference. Tools converting tf vectors matrices formats available, useful context. general, used following structure functions perform analyses: Input objects dataframes containing tf vectors tf vectors converted matrices (numeric vectors) estimation procedure implemented using matrices Results formatted tf vectors appropriate returned user pipeline shifts burden data conversion user function author, maintains seamlessness user. example, refunder::rfr_fpca function functional principal components analysis two main inputs: dataframe containing one tf variables, name variable decompose using FPCA. Internally, tf vector converted matrix estimation. function returns list elements relevant FPCA, includes estimated functions tfb vector. also predict method, FPCA expansions new data using estimated basis can easily obtained users.","code":""},{"path":"https://tidyfun.github.io/tidyfun/articles/x05_Advice.html","id":"keep-us-informed","dir":"Articles","previous_headings":"","what":"Keep us informed!","title":"Advice for Developers","text":"hope tidyfun useful platform researchers developers. reason, please let us know use tidyfun work, identify issues, suggestions.","code":""},{"path":"https://tidyfun.github.io/tidyfun/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabian Scheipl. Author, maintainer. Jeff Goldsmith. Author. Julia Wrobel. Author. Maximilian Muecke. Contributor.","code":""},{"path":"https://tidyfun.github.io/tidyfun/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Scheipl F, Goldsmith J, Wrobel J (2024). tidyfun: Tools Tidy Functional Data. R package version 0.0.98,  https://tidyfun.github.io/tidyfun/, https://github.com/tidyfun/tidyfun.","code":"@Manual{,   title = {tidyfun: Tools for Tidy Functional Data},   author = {Fabian Scheipl and Jeff Goldsmith and Julia Wrobel},   year = {2024},   note = {R package version 0.0.98,  https://tidyfun.github.io/tidyfun/},   url = {https://github.com/tidyfun/tidyfun}, }"},{"path":"https://tidyfun.github.io/tidyfun/index.html","id":"tidyfun-","dir":"","previous_headings":"","what":"Tools for Tidy Functional Data","title":"Tools for Tidy Functional Data","text":"goal tidyfun provide accessible well-documented software makes functional data analysis R easy – specifically data wrangling exploratory analysis. achieved introducing new data type (tf). Vectors class tf can operated using many standard functions (+, mean, etc.) well several new functions tidyfun (tf_smooth, tf_where). Crucially, vectors class tf can included data frames containing variables, enabling data manipulation using tidyverse tools. approach connected conceptual framework functional data analysis, assumes complete functions unit observation; tidyfun, full curves sit alongside numeric, factor, observations subject.","code":""},{"path":"https://tidyfun.github.io/tidyfun/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Tidy Functional Data","text":"tidyfun currently CRAN. can install development version GitHub :","code":"# install.packages(\"pak\") pak::pak(\"tidyfun/tidyfun\")"},{"path":"https://tidyfun.github.io/tidyfun/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for Tidy Functional Data","text":"tidyfun provides: new data types representing functional data: tfd & tfb arithmetic operators descriptive statistics data tidyverse-verbs handling functional data – especially inside data frames new graphics functions tf vectors tidy functional data frames detailed information features tidyfun, check articles following topics: Representing functional data tf vectors, operating vectors Converting non-tidy functional data (matrices, “long” “wide” data frames) tidy functional data Wrangling data frames include functional data using tidyverse tidyfun tools Visualizing tidy functional data result package enables exploratory data analysis like following, computes group-specific mean curves dti_df dataset, plots result:","code":"library(\"tidyfun\") data(dti_df, package = \"tidyfun\")  dti_df |>   group_by(case, sex) |>   summarize(mean_cca = mean(cca, na.rm = TRUE)) |>   ggplot(aes(y = mean_cca, color = case)) +   geom_spaghetti(size = 2) +   facet_grid(~sex)"},{"path":[]},{"path":"https://tidyfun.github.io/tidyfun/index.html","id":"new-vector-like-data-types-for-functional-data","dir":"","previous_headings":"What does it do?","what":"New vector-like data types for functional data","title":"Tools for Tidy Functional Data","text":"tidyfun introduces new S3-classes functional data, either raw data (class tfd tidy functional data) basis representation (class tfb tidy functional basis data), defined underlying {tf} package. tf-objects can subsetted subassigned, computed summarized. Almost operators like ==, + * math functions like sum, log abs statistics functions like mean sd defined tidyfun’s data structures (). tf objects basically glorified lists, work well columns data frames. makes lot easier keep data functional measurements together one object preprocessing, exploratory analysis description. time, objects actually behave like vectors functions extent, .e., can evaluated point domain, can integrated differentiated, etc. See information operations defined tf vectors.","code":""},{"path":"https://tidyfun.github.io/tidyfun/index.html","id":"methods-for-converting-existing-data-to-tf","dir":"","previous_headings":"What does it do?","what":"Methods for converting existing data to tf","title":"Tools for Tidy Functional Data","text":"tidyfun includes functions tfd tfb converting matrices, data frames, etc. tf vectors. also provides tf_gather & tf_nest order reshape tables functional data, going wide narrow long short; functions like .matrix, tf_spread & tf_unnest can reverse data conversions. See details getting data () tf format.","code":""},{"path":"https://tidyfun.github.io/tidyfun/index.html","id":"tidyverse-verbs-for-dealing-with-functional-data-inside-data-frames","dir":"","previous_headings":"What does it do?","what":"tidyverse verbs for dealing with functional data inside data frames","title":"Tools for Tidy Functional Data","text":"dplyr verbs work tf-columns, can filter, mutate, group_by & summarize, etc., functional data pretty much like conventional “tidy” data. tidyfun adds several functions useful conjunction , like tf_anywhere tf_smooth. See see can wrangle functional data.","code":""},{"path":"https://tidyfun.github.io/tidyfun/index.html","id":"new-ggplot2-geoms-and-stats-for-functional-data","dir":"","previous_headings":"What does it do?","what":"New ggplot2 geoms and stats for functional data","title":"Tools for Tidy Functional Data","text":"tidyfun defines pasta-themed geoms functional data: geom_spaghetti lines, geom_meatballs (lines &) points, gglasagna lasagna plots, order-aesthetic sort lasagna layers, geom_capellini glyphs plots (.e., sparklines), well new methods base R graphics functions plot, lines points quick easy visualizations functional data. See documentation visualization approaches take look Visualization vignette. Found bug? Got question? Missing functionality? Please let us know can make better.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/chf_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Congestive heart failure accelerometry data — chf_df","title":"Congestive heart failure accelerometry data — chf_df","text":"Activity data study congestive heart failure. Data originally presented \"Multilevel Matrix-Variate Analysis Application Accelerometry-Measured Physical Activity Clinical Populations\" Huang et al.; data public, download information paper.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tidyfun/reference/dti_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Diffusion tensor imaging data — dti_df","title":"Diffusion tensor imaging data — dti_df","text":"Fractional anisotropy (FA) tract profiles corpus callosum (cca) right corticospinal tract (rcst). Accompanying tract profiles subject ID numbers, visit number, total number scans, multiple sclerosis case status Paced Auditory Serial Addition Test (pasat) score. Data also include refund package another format.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/dti_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diffusion tensor imaging data — dti_df","text":"use data example written work, please include following acknowledgment: “MRI/DTI data collected Johns Hopkins University Kennedy-Krieger Institute\"","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tidyfun/reference/ggcapellini.html","id":null,"dir":"Reference","previous_headings":"","what":"Glyph plots for tf objects — ggcapellini","title":"Glyph plots for tf objects — ggcapellini","text":"Plots miniature glyph / sparkline entry tf-object. (Capellini tiny spaghetti -- angel hair pasta.) Aesthetics x y specify location glyphs, tf aesthetic defines shapes. accommodate fellow idiots, geom_cappelini,  geom_cappellini geom_capelini also work.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/ggcapellini.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glyph plots for tf objects — ggcapellini","text":"","code":"stat_capellini(   mapping = NULL,   data = NULL,   geom = \"capellini\",   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   arg = NULL,   add_lines = FALSE,   add_boxes = TRUE,   width = NULL,   height = NULL,   ... )  geom_capellini(   mapping = NULL,   data = NULL,   stat = \"capellini\",   position = \"identity\",   ...,   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   arg = NULL,   add_lines = TRUE,   add_boxes = TRUE,   width = NULL,   height = NULL,   box.colour = \"#0000001A\",   box.linetype = 1,   box.fill = NA,   box.linewidth = 0.1,   box.alpha = 0.1,   line.colour = \"black\",   line.linetype = 2,   line.linewidth = 0.3,   line.alpha = 0.5 )"},{"path":"https://tidyfun.github.io/tidyfun/reference/ggcapellini.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glyph plots for tf objects — ggcapellini","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data, either ggproto Geom subclass string naming geom stripped geom_ prefix (e.g. \"point\" rather \"geom_point\") position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. na.rm remove NAs? defaults TRUE show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). arg evaluate tf -- defaults default ;) add_lines reference line middle range functions' values added glyph? defaults TRUE add_boxes box added frame glyph? defaults TRUE width width glyphs. Defaults 2/3 ggplot2::resolution() variable x-aesthetic, small values close together. height height glyphs. Defaults 2/3 ggplot2::resolution() variable y-aesthetic, small values close together. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. stat \"capellini\"! box.colour aesthetic property box box.linetype aesthetic property box box.fill aesthetic property box box.linewidth aesthetic property box box.alpha aesthetic property box line.colour aesthetic property reference line line.linetype aesthetic property reference line line.linewidth aesthetic property reference line line.alpha aesthetic property reference line","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/ggcapellini.html","id":"tf-aesthetic","dir":"Reference","previous_headings":"","what":"tf aesthetic","title":"Glyph plots for tf objects — ggcapellini","text":"Mandatory. Used designate column class tf visualized glyphs.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tidyfun/reference/ggcapellini.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glyph plots for tf objects — ggcapellini","text":"","code":"if (FALSE) { # takes a little too long for CRAN library(ggplot2) library(tidyverse) weather <- fda::CanadianWeather canada <- data.frame(   place = weather$place,   region = weather$region,   lat = weather$coordinates[, 1],   lon = -weather$coordinates[, 2],   region = weather$region ) canada$temp <- tfd(t(weather$dailyAv[, , 1]), arg = 1:365) canada$precipl10 <- tfd(t(weather$dailyAv[, , 3]), arg = 1:365) |> tf_smooth() canada_map <-   data.frame(maps::map(\"world\", \"Canada\", plot = FALSE)[c(\"x\", \"y\")]) # map of canada with annual temperature averages in red, precipitation in blue: ggplot(canada, aes(x = lon, y = lat)) +   geom_capellini(aes(tf = precipl10), width = 3, height = 5, colour = \"blue\") +   geom_capellini(aes(tf = temp), width = 3, height = 5, colour = \"red\") +   geom_path(data = canada_map, aes(x = x, y = y), alpha = 0.1) +   coord_quickmap()  ggplot(canada, aes(x = lon, y = lat, colour = region)) +   geom_capellini(aes(tf = precipl10),     width = 5, height = 3,     line.linetype = 1, box.fill = \"white\", box.alpha = 0.5, box.colour = NA   ) }"},{"path":"https://tidyfun.github.io/tidyfun/reference/ggerrorband.html","id":null,"dir":"Reference","previous_headings":"","what":"Error bands using tf objects as bounds — ggerrorband","title":"Error bands using tf objects as bounds — ggerrorband","text":"Plots shaded region tf-objects ymax ymin. primarily intended help plotting confidence bands although purposes possible.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/ggerrorband.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error bands using tf objects as bounds — ggerrorband","text":"","code":"stat_errorband(   mapping = NULL,   data = NULL,   geom = \"errorband\",   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   arg = NULL,   ... )  geom_errorband(   mapping = NULL,   data = NULL,   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   arg = NULL,   ... )"},{"path":"https://tidyfun.github.io/tidyfun/reference/ggerrorband.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error bands using tf objects as bounds — ggerrorband","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data, either ggproto Geom subclass string naming geom stripped geom_ prefix (e.g. \"point\" rather \"geom_point\") position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. na.rm remove NAs? defaults TRUE show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). arg evaluate tf -- defaults default ;) ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/ggerrorband.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Error bands using tf objects as bounds — ggerrorband","text":"","code":"set.seed(1221) data <- data.frame(id = factor(1:2)) data$f <- tf_rgp(2) data$ymax <- data$f + 1 data$ymin <- data$f - 1 library(ggplot2) ggplot(data, aes(y = f, color = id)) +   geom_spaghetti() +   geom_errorband(aes(ymax = ymax, ymin = ymin, fill = id)) +   facet_wrap(~id)"},{"path":"https://tidyfun.github.io/tidyfun/reference/gglasagna.html","id":null,"dir":"Reference","previous_headings":"","what":"Lasagna plots for tfs using ggplot2 — gglasagna","title":"Lasagna plots for tfs using ggplot2 — gglasagna","text":"Lasagna plots show one color bar function.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/gglasagna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lasagna plots for tfs using ggplot2 — gglasagna","text":"","code":"gglasagna(   data,   tf,   order = NULL,   label = NULL,   arg = NULL,   order_by = NULL,   order_ticks = TRUE )"},{"path":"https://tidyfun.github.io/tidyfun/reference/gglasagna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lasagna plots for tfs using ggplot2 — gglasagna","text":"data data. Duhh. tf bare name tf column visualize order (optional) bare name column data define vertical order lasagna layers. label (optional) bare name column data define labels lasagna layers. Defaults names y, present, row numbers. arg arg evaluate y om order_by function applied row y[, arg] must return scalar value define order lasagna layers. order_ticks add horizontal lines indicating borders levels order (discrete variable) labels levels? Defaults TRUE. Supply list arguments (grep source code `order_ticks_args``) override default appearance labels. Switch use facetting, hack produce nonsense.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/gglasagna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lasagna plots for tfs using ggplot2 — gglasagna","text":"`ggplot2`` object","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/gglasagna.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lasagna plots for tfs using ggplot2 — gglasagna","text":"vertical order lasagna layers increasing order (provided), values returned order_by (provided), row number observations. .e., lowest values top default first layer first observation data vertical order layers ordering observations obtained dplyr::arrange(data, order, order_by(value), row_number()).","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tidyfun/reference/gglasagna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lasagna plots for tfs using ggplot2 — gglasagna","text":"","code":"if (FALSE) { set.seed(1221) data <- expand.grid(group = factor(1:5), rep = 1:10) data <- dplyr::mutate(data,   id = paste(group, rep, sep = \"-\"),   f =  tf_rgp(50),   fb = tfb(f) )  gglasagna(data, f, label = id) gglasagna(data, fb, label = id, order = group) # order is lowest first / on top by default gglasagna(data, f, label = id, order = tf_depth(f)) gglasagna(data, f, label = id, order_by = first) +   facet_wrap(~group, scales = \"free\") # order of layers is by \"order_by\" within \"order\": gglasagna(data, fb, label = id, order = group, order_by = first) }"},{"path":"https://tidyfun.github.io/tidyfun/reference/ggspaghetti.html","id":null,"dir":"Reference","previous_headings":"","what":"Spaghetti plots for tf objects — ggspaghetti","title":"Spaghetti plots for tf objects — ggspaghetti","text":"Plots line entry tf-object. geom_spaghetti spaghetti (.e. \"hairball\") plots, geom_meatballs spaghetti plots points actual evaluations.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/ggspaghetti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spaghetti plots for tf objects — ggspaghetti","text":"","code":"stat_tf(   mapping = NULL,   data = NULL,   geom = \"spaghetti\",   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   arg = NULL,   ... )  geom_spaghetti(   mapping = NULL,   data = NULL,   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   arg = NULL,   ... )  geom_meatballs(   mapping = NULL,   data = NULL,   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   arg = NULL,   spaghetti = TRUE,   ... )"},{"path":"https://tidyfun.github.io/tidyfun/reference/ggspaghetti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spaghetti plots for tf objects — ggspaghetti","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data, either ggproto Geom subclass string naming geom stripped geom_ prefix (e.g. \"point\" rather \"geom_point\") position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. na.rm remove NAs? defaults TRUE show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). arg evaluate functions y -- defaults default ;) ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. spaghetti plot noodles along meatballs? defaults TRUE.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/ggspaghetti.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spaghetti plots for tf objects — ggspaghetti","text":"\"Flipped\" aesthetics implemented geoms.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/ggspaghetti.html","id":"y-aesthetic","dir":"Reference","previous_headings":"","what":"y aesthetic","title":"Spaghetti plots for tf objects — ggspaghetti","text":"Mandatory. Used designate column class tf visualized.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tidyfun/reference/ggspaghetti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spaghetti plots for tf objects — ggspaghetti","text":"","code":"set.seed(1221) data <- data.frame(col = sample(gl(5, 2))) data$f <- tf_rgp(10) data$fi <- tf_jiggle(data$f) data$fb <- tfb(data$f) #> Percentage of input data variability preserved in basis representation #> (per functional observation, approximate): #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   99.20   99.75   99.90   99.79   99.90  100.00  library(ggplot2) ggplot(data, aes(y = f, color = tf_depth(f))) +   geom_spaghetti()  ggplot(data, aes(y = fi, shape = col, color = col)) +   geom_meatballs()  ggplot(data, aes(y = fi)) +   geom_meatballs(spaghetti = FALSE) +   facet_wrap(~col)"},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_evaluate.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate tfs inside a data.frame — tf_evaluate.data.frame","title":"Evaluate tfs inside a data.frame — tf_evaluate.data.frame","text":"Evaluate tfs inside data.frame","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_evaluate.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate tfs inside a data.frame — tf_evaluate.data.frame","text":"","code":"# S3 method for data.frame tf_evaluate(object, ..., arg)"},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_evaluate.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate tfs inside a data.frame — tf_evaluate.data.frame","text":"object data.frame-like object tf columns. ... optional: selection tf-columns. empty, tf-variables data frame selected. can supply bare variable names, select variables x z x:z, exclude y -y. options, see dplyr::select() documentation. arg optional evaluation grid (vector list vectors). Defaults tf_arg(object).","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_evaluate.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate tfs inside a data.frame — tf_evaluate.data.frame","text":"Replaces tf-columns list columns smaller data.frames containing functions' arguments (arg) evaluations (value) returns modified nested dataframe.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_evaluate.data.frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate tfs inside a data.frame — tf_evaluate.data.frame","text":"arg-argument tf_evaluate.data.frame method can list arg-vectors -lists used arg argument tf::tf_evaluate()-method respective tf-columns object. ... used tf-object, second unnamed argument methods interpreted arg.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_gather.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather all columns representing functional measurements into a tfd-object — tf_gather","title":"Gather all columns representing functional measurements into a tfd-object — tf_gather","text":"Similar spirit tidyr::gather(), put values gathered columns one long \"value\"-column labeling different original columns long \"key\"-column -- instead creates tfd-column containing functional measurements columns given ....","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_gather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather all columns representing functional measurements into a tfd-object — tf_gather","text":"","code":"tf_gather(   data,   ...,   key = \".tfd\",   arg = NULL,   domain = NULL,   evaluator = tf_approx_linear,   resolution = NULL )"},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_gather.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather all columns representing functional measurements into a tfd-object — tf_gather","text":"data data frame -- note dplyr handle matrix columns well, data contains one , tf_gather fail... ... selection columns collect tfd object. column represents measurements functional variable specific arg-val. Can also name matrix-valued column, see . empty, variables selected. can supply bare variable names, select variables x z x:z, exclude y -y. options, see dplyr::select() documentation. key name created tfd-column. Defaults \".tfd\", function try guess name based column names gathered columns case. common prefix column names found, used instead. also get message . arg optional. Argument values functions. provided, guessed column names well. See also tf::tfd(). domain optional. Range possible arg-values. See tf::tfd() details. evaluator optional. function accepting arguments x, arg, evaluations. See tf::tfd() details. resolution optional. Resolution evaluation grid arg. See tf::tfd() details.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_gather.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather all columns representing functional measurements into a tfd-object — tf_gather","text":"modified data.frame tfd column replacing ....","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_gather.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gather all columns representing functional measurements into a tfd-object — tf_gather","text":"","code":"(d <- dplyr::as.tbl(data.frame(refund::DTI[1:5, ]$cca[, 1:10]))) #> Warning: `as.tbl()` was deprecated in dplyr 1.0.0. #> ℹ Please use `tibble::as_tibble()` instead. #> # A tibble: 5 × 10 #>   cca_1 cca_2 cca_3 cca_4 cca_5 cca_6 cca_7 cca_8 cca_9 cca_10 #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> #> 1 0.491 0.517 0.536 0.555 0.593 0.633 0.650 0.656 0.649  0.638 #> 2 0.472 0.487 0.502 0.523 0.552 0.587 0.597 0.603 0.592  0.579 #> 3 0.502 0.514 0.539 0.574 0.603 0.634 0.636 0.635 0.620  0.609 #> 4 0.402 0.423 0.440 0.460 0.475 0.499 0.517 0.555 0.583  0.601 #> 5 0.402 0.406 0.399 0.386 0.409 0.425 0.430 0.445 0.487  0.510 tf_gather(d) #> creating new tfd-column <cca> #> # A tibble: 5 × 1 #>                                 cca #>                           <tfd_reg> #> 1 [1]: (1,0.5);(2,0.5);(3,0.5); ... #> 2 [2]: (1,0.5);(2,0.5);(3,0.5); ... #> 3 [3]: (1,0.5);(2,0.5);(3,0.5); ... #> 4 [4]: (1,0.4);(2,0.4);(3,0.4); ... #> 5 [5]: (1,0.4);(2,0.4);(3,0.4); ... tf_gather(d, key = \"cca_tf\") #> # A tibble: 5 × 1 #>                              cca_tf #>                           <tfd_reg> #> 1 [1]: (1,0.5);(2,0.5);(3,0.5); ... #> 2 [2]: (1,0.5);(2,0.5);(3,0.5); ... #> 3 [3]: (1,0.5);(2,0.5);(3,0.5); ... #> 4 [4]: (1,0.4);(2,0.4);(3,0.4); ... #> 5 [5]: (1,0.4);(2,0.4);(3,0.4); ... tf_gather(d, arg = seq(0, 1, length.out = 10))$cca #> creating new tfd-column <cca> #> tfd[5] on (0,1) based on 10 evaluations each #> interpolation by tf_approx_linear  #> [1]: (0.00,0.49);(0.11,0.52);(0.22,0.54); ... #> [2]: (0.00,0.47);(0.11,0.49);(0.22,0.50); ... #> [3]: (0.00,0.50);(0.11,0.51);(0.22,0.54); ... #> [4]: (0.00,0.40);(0.11,0.42);(0.22,0.44); ... #> [5]: (0.00,0.40);(0.11,0.41);(0.22,0.40); ... (d2 <- dplyr::bind_cols(id = rownames(d), d)) #> # A tibble: 5 × 11 #>   id    cca_1 cca_2 cca_3 cca_4 cca_5 cca_6 cca_7 cca_8 cca_9 cca_10 #>   <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> #> 1 1     0.491 0.517 0.536 0.555 0.593 0.633 0.650 0.656 0.649  0.638 #> 2 2     0.472 0.487 0.502 0.523 0.552 0.587 0.597 0.603 0.592  0.579 #> 3 3     0.502 0.514 0.539 0.574 0.603 0.634 0.636 0.635 0.620  0.609 #> 4 4     0.402 0.423 0.440 0.460 0.475 0.499 0.517 0.555 0.583  0.601 #> 5 5     0.402 0.406 0.399 0.386 0.409 0.425 0.430 0.445 0.487  0.510 tf_gather(d2, -id) # tf_gather(d2, matches(\"cca\")); tf_gather(d2, -1); etc #> creating new tfd-column <cca> #> # A tibble: 5 × 2 #>   id                                  cca #>   <chr>                         <tfd_reg> #> 1 1     [1]: (1,0.5);(2,0.5);(3,0.5); ... #> 2 2     [2]: (1,0.5);(2,0.5);(3,0.5); ... #> 3 3     [3]: (1,0.5);(2,0.5);(3,0.5); ... #> 4 4     [4]: (1,0.4);(2,0.4);(3,0.4); ... #> 5 5     [5]: (1,0.4);(2,0.4);(3,0.4); ..."},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_nest.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn ","title":"Turn ","text":"Similar spirit tidyr::nest(). turns tables \"long\" format, one column (.id) defines unit observation, one column (.arg) defines evaluation grids functional observations, columns (...) define values functions points (much shorter) table containing tfd-objects. variables checked constancy .id appended well.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_nest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn ","text":"","code":"tf_nest(   data,   ...,   .id = \"id\",   .arg = \"arg\",   domain = NULL,   evaluator = \"tf_approx_linear\",   resolution = NULL )"},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_nest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn ","text":"data data frame ... selection columns. empty, variables except .id .arg columns selected. can supply bare variable names, select variables x z x:z, exclude y -y. options, see dplyr::select() documentation. .id (bare quoted) name column defining different observations. Defaults \"id\". .arg (bare quoted) name column defining arg-values observed functions. Defaults \"arg\". domain optional. Range possible arg-values. See tf::tfd() details. evaluator optional. function accepting arguments x, arg, evaluations. See tf::tfd() details. resolution optional. Resolution evaluation grid arg. See tf::tfd() details.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_nest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn ","text":"data frame (least) .id tfd columns","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_nest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn ","text":"domain, resolution evaluator can specified lists vectors nesting multiple functional data columns different properties. quasi-quotation bitch, can specify evaluator functions strings bare names .","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_spread.html","id":null,"dir":"Reference","previous_headings":"","what":"Spread a tf-column into many columns representing the\nfunction evaluations. — tf_spread","title":"Spread a tf-column into many columns representing the\nfunction evaluations. — tf_spread","text":"Similar spirit tidyr::spread(), shorten, just widens data frame  -- tf-column spread many columns containing functional measurements.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_spread.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spread a tf-column into many columns representing the\nfunction evaluations. — tf_spread","text":"","code":"tf_spread(data, value, arg, sep = \"_\", interpolate = FALSE)"},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_spread.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spread a tf-column into many columns representing the\nfunction evaluations. — tf_spread","text":"data data frame least one tf-column value name tf-column 'spread'/evaluate. can supply bare variable names etc., see dplyr::select() documentation. Also works without one tf data, see examples. arg (Semi-)optional. vector arg-values evaluate functions. provided, uses default args. specified tf_irreg, otherwise observed gridpoint used every function. sep separating character used create column names new columns, defaults \"_\" column names \"<name tf>_<arg-value>\". Set NULL get column names contain arg-value. interpolate interpolate-argument evaluating functional data. Defaults FALSE, .e., tfds inter/extrapolated unobserved arg-values.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_spread.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spread a tf-column into many columns representing the\nfunction evaluations. — tf_spread","text":"wider dataframe tf-column spread many columns containing functional measurements one arg-value.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_spread.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spread a tf-column into many columns representing the\nfunction evaluations. — tf_spread","text":"","code":"d <- dplyr::tibble(g = 1:3) d$f <- tf_rgp(3, 11L) tf_spread(d, f) #> # A tibble: 3 × 12 #>       g    f_0  f_0.1  f_0.2  f_0.3  f_0.4   f_0.5  f_0.6  f_0.7  f_0.8  f_0.9 #> * <int>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #> 1     1  1.37   1.51   1.30   0.705  0.216  0.220   0.601  1.10   1.49   1.43  #> 2     2  0.352  0.432 -0.216 -1.09  -1.54  -1.52   -1.05  -0.211  0.696  1.41  #> 3     3 -1.05  -1.06  -0.899 -0.646 -0.322 -0.0681 -0.211 -0.621 -0.771 -0.741 #> # ℹ 1 more variable: f_1 <dbl> tf_spread(d, -g) #> # A tibble: 3 × 12 #>       g    f_0  f_0.1  f_0.2  f_0.3  f_0.4   f_0.5  f_0.6  f_0.7  f_0.8  f_0.9 #> * <int>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #> 1     1  1.37   1.51   1.30   0.705  0.216  0.220   0.601  1.10   1.49   1.43  #> 2     2  0.352  0.432 -0.216 -1.09  -1.54  -1.52   -1.05  -0.211  0.696  1.41  #> 3     3 -1.05  -1.06  -0.899 -0.646 -0.322 -0.0681 -0.211 -0.621 -0.771 -0.741 #> # ℹ 1 more variable: f_1 <dbl> tf_spread(d) #> # A tibble: 3 × 12 #>       g    f_0  f_0.1  f_0.2  f_0.3  f_0.4   f_0.5  f_0.6  f_0.7  f_0.8  f_0.9 #> * <int>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #> 1     1  1.37   1.51   1.30   0.705  0.216  0.220   0.601  1.10   1.49   1.43  #> 2     2  0.352  0.432 -0.216 -1.09  -1.54  -1.52   -1.05  -0.211  0.696  1.41  #> 3     3 -1.05  -1.06  -0.899 -0.646 -0.322 -0.0681 -0.211 -0.621 -0.771 -0.741 #> # ℹ 1 more variable: f_1 <dbl>"},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_unnest.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn (data frames with) tf-objects / list columns into ","title":"Turn (data frames with) tf-objects / list columns into ","text":"Similar spirit tidyr::unnest(), reverse tf_nest(). tf-method simply turns single tfd tfb vector \"long\" tibble().","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_unnest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn (data frames with) tf-objects / list columns into ","text":"","code":"tf_unnest(data, cols, arg, interpolate = TRUE, ...)  # S3 method for tf tf_unnest(data, cols, arg, interpolate = TRUE, ...)  # S3 method for data.frame tf_unnest(   data,   cols,   arg,   interpolate = TRUE,   keep_empty = FALSE,   ptype = NULL,   names_sep = \"_\",   names_repair = \"check_unique\",   ... )"},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_unnest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn (data frames with) tf-objects / list columns into ","text":"data data.frame tf-object cols <tidy-select> List-columns unnest. selecting multiple columns, values row recycled common size. arg optional values arg argument tf_evaluate() interpolate return function values arg-values original grid? Defaults TRUE. ... used currently keep_empty default, get one row output element list unchopping/unnesting. means size-0 element (like NULL empty data frame vector), entire row dropped output. want preserve rows, use keep_empty = TRUE replace size-0 elements single row missing values. ptype Optionally, named list column name-prototype pairs coerce cols , overriding default guessed combining individual values. Alternatively, single empty ptype can supplied, applied cols. names_sep NULL, default, outer names come inner names. string, outer names formed pasting together outer inner column names, separated names_sep. names_repair Used check output data frame valid names. Must one following options: \"minimal\": name repair checks, beyond basic existence, \"unique\": make sure names unique empty, \"check_unique\": (default), name repair, check unique, \"universal\": make names unique syntactic function: apply custom name repair. tidyr_legacy: use name repair tidyr 0.8. formula: purrr-style anonymous function (see rlang::as_function()) See vctrs::vec_as_names() details terms strategies used enforce .","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_unnest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn (data frames with) tf-objects / list columns into ","text":"\"long\" data frame tf-columns expanded arg, value- columns.","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/tf_unnest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn (data frames with) tf-objects / list columns into ","text":"Caution -- uses slightly different defaults names unnested columns tidyr::unnest(). data.frames, make sure ID column data unnesting! include ID column unique identifier row, able match arg-value pairs different functions unnesting.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tidyfun/reference/tftibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Format tidy functional data for tibbles — type_sum.tf","title":"Format tidy functional data for tibbles — type_sum.tf","text":"Summarize tidy functional data tibble","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/tftibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format tidy functional data for tibbles — type_sum.tf","text":"","code":"# S3 method for tf type_sum(x, ...)  # S3 method for tf obj_sum(x)  # S3 method for tf pillar_shaft(x, ...)"},{"path":"https://tidyfun.github.io/tidyfun/reference/tftibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format tidy functional data for tibbles — type_sum.tf","text":"x object class tf ... ignored","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/tftibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format tidy functional data for tibbles — type_sum.tf","text":"see pillar::type_sum()","code":""},{"path":"https://tidyfun.github.io/tidyfun/reference/tidyfun-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tidyfun: Tools for Tidy Functional Data — tidyfun-package","title":"tidyfun: Tools for Tidy Functional Data — tidyfun-package","text":"tidyfun makes data wrangling exploratory analysis functional data R easier.tidyfun based classes methods defined package tf provides: new data types representing functional data: tf::tfd() & tf::tfb() arithmetic operators (tf::Ops.tf()), descriptive statistics: e.g. tf::mean.tf(), tf::median.tf() graphics functions data: tf::plot.tf(), geom_spaghetti(), gglasagna() functions smoothing (tf::tf_smooth.tfd()), differentiation integration (tf::tf_derive.tfd()) tidyverse-verbs handling functional data inside data frames: tf_gather() etc.  Also see vignette(\"Introducing tidyfun\", \"tidyfun\") brief introduction.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tidyfun/reference/tidyfun-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tidyfun: Tools for Tidy Functional Data — tidyfun-package","text":"Maintainer: Fabian Scheipl fabian.scheipl@googlemail.com (ORCID) Authors: Jeff Goldsmith Julia Wrobel (ORCID) contributors: Maximilian Muecke (ORCID) [contributor]","code":""}]
